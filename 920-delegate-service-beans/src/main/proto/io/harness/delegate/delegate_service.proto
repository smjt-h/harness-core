// Copyright 2021 Harness Inc. All rights reserved.
// Use of this source code is governed by the PolyForm Shield 1.0.0 license
// that can be found in the licenses directory at the root of this repository, also available at
// https://polyformproject.org/wp-content/uploads/2020/06/PolyForm-Shield-1.0.0.txt.

syntax = "proto3";

package io.harness.delegate;

option java_multiple_files = true;
option go_package = "920_delegate_service_beans";

import "955-delegate-beans/src/main/proto/io/harness/delegate/account.proto";
import "955-delegate-beans/src/main/proto/io/harness/delegate/capability.proto";
import "955-delegate-beans/src/main/proto/io/harness/perpetualtask/perpetual_task.proto";

import "920-delegate-service-beans/src/main/proto/io/harness/delegate/task.proto";
import "920-delegate-service-beans/src/main/proto/io/harness/delegate/progress.proto";
import "920-delegate-service-beans/src/main/proto/io/harness/callback/callback.proto";
import "920-delegate-service-beans/src/main/proto/io/harness/perpetualtask/perpetual_task_client.proto";

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

service DelegateService {
  rpc RegisterCallback(RegisterCallbackRequest) returns (RegisterCallbackResponse);

  rpc SubmitTask(SubmitTaskRequest) returns (SubmitTaskResponse);
  rpc CancelTask(CancelTaskRequest) returns (CancelTaskResponse);
  rpc TaskProgress(TaskProgressRequest) returns (TaskProgressResponse);
  rpc TaskProgressUpdates(TaskProgressUpdatesRequest) returns (stream TaskProgressUpdatesResponse);

  rpc ExecuteParkedTask(ExecuteParkedTaskRequest) returns (ExecuteParkedTaskResponse);
  rpc FetchParkedTaskStatus(FetchParkedTaskStatusRequest) returns (FetchParkedTaskStatusResponse);
  rpc SendTaskStatus(SendTaskStatusRequest) returns (SendTaskStatusResponse);
  rpc SendTaskProgress(SendTaskProgressRequest) returns (SendTaskProgressResponse);

  rpc CreatePerpetualTask(CreatePerpetualTaskRequest) returns (CreatePerpetualTaskResponse);
  rpc DeletePerpetualTask(DeletePerpetualTaskRequest) returns (DeletePerpetualTaskResponse);
  rpc ResetPerpetualTask(ResetPerpetualTaskRequest) returns (ResetPerpetualTaskResponse);

  // This API is temporary to allow for querying objects from collections to allow for integration
  // before the rest of the micro services are promoted
  rpc ObtainDocument(ObtainDocumentRequest) returns (ObtainDocumentResponse);
}

// Next ID: 11
message SubmitTaskRequest {
  callback.DelegateCallbackToken callback_token = 1;

  AccountId account_id = 2;

  TaskSetupAbstractions setup_abstractions = 3;
  TaskLogAbstractions log_abstractions = 7;
  TaskDetails details = 4;
  repeated Capability capabilities = 5;
  repeated TaskSelector selectors = 6;

  // The time the task should stay in the queue. To set the execution time out, fill out
  // details.execution_timeout
  google.protobuf.Duration queue_timeout = 8;
  bool selectionTrackingLogEnabled = 9;

  bool force_execute = 10;
  repeated string eligibleToExecuteDelegateIds = 11;
}

message SubmitTaskResponse {
  TaskId task_id = 1;
  google.protobuf.Timestamp total_expiry = 2;
}

message CancelTaskRequest {
  AccountId account_id = 1;
  TaskId task_id = 2;
}

message CancelTaskResponse {
  TaskExecutionStage canceled_at_stage = 1;
}

message ExecuteParkedTaskRequest {
  AccountId account_id = 1;
  TaskId task_id = 2;
  string results_prefix = 3;
}

message ExecuteParkedTaskResponse {
  TaskId task_id = 1;
}

message FetchParkedTaskStatusRequest {
  AccountId account_id = 1;
  TaskId task_id = 2;
  callback.DelegateCallbackToken callback_token = 3;
}

message FetchParkedTaskStatusResponse {
  bool fetch_results = 1;
  bytes serialized_task_results = 2;
}

message SendTaskStatusRequest {
  AccountId account_id = 1;
  TaskId task_id = 2;
  callback.DelegateCallbackToken callback_token = 3;
  TaskResponseData task_response_data = 4;
}

message SendTaskProgressRequest {
  AccountId account_id = 1;
  TaskId task_id = 2;
  callback.DelegateCallbackToken callback_token = 3;
  TaskResponseData task_response_data = 4;
}

message SendTaskStatusResponse {
  bool success = 1;
}

message SendTaskProgressResponse {
  bool success = 1;
}

message TaskProgressRequest {
  AccountId account_id = 1;
  TaskId task_id = 2;
}

message TaskProgressResponse {
  TaskExecutionStage currently_at_stage = 1;
}

message TaskProgressUpdatesRequest {
  AccountId account_id = 1;
  TaskId task_id = 2;
}

message TaskProgressUpdatesResponse {
  TaskExecutionStage currently_at_stage = 1;
}

message RegisterCallbackRequest {
  callback.DelegateCallback callback = 1;
}

message RegisterCallbackResponse {
  callback.DelegateCallbackToken callback_token = 1;
}

// Next ID: 8
message CreatePerpetualTaskRequest {
  AccountId account_id = 1;
  // client provides a task ID to uniquely identify the task on their side
  string client_task_id = 7;
  string type = 2;
  perpetualtask.PerpetualTaskSchedule schedule = 3;
  perpetualtask.PerpetualTaskClientContextDetails context = 4;
  bool allow_duplicate = 5;
  string task_description = 6;
}

message CreatePerpetualTaskResponse {
  perpetualtask.PerpetualTaskId perpetual_task_id = 1;
}

message DeletePerpetualTaskRequest {
  AccountId account_id = 1;
  perpetualtask.PerpetualTaskId perpetual_task_id = 2;
}

message DeletePerpetualTaskResponse {}

message ResetPerpetualTaskRequest {
  AccountId account_id = 1;
  perpetualtask.PerpetualTaskId perpetual_task_id = 2;
  perpetualtask.PerpetualTaskExecutionBundle task_execution_bundle = 3;
}

message ResetPerpetualTaskResponse {}

// Temporary {{
message Documents {
  string collection_name = 1;
  repeated string uuid = 2;
}

message ObtainDocumentRequest {
  repeated Documents documents = 1;
}

message Document {
  string collection_name = 1;
  string uuid = 2;
  bytes kryo_bytes = 3;
}

message ObtainDocumentResponse {
  repeated Document documents = 1;
}

// }}
