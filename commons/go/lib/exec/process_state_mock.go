// Code generated by MockGen. DO NOT EDIT.
// Source: process_state_unix.go

// Package exec is a generated GoMock package.
package exec

import (
	reflect "reflect"
	syscall "syscall"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockProcessState is a mock of ProcessState interface.
type MockProcessState struct {
	ctrl     *gomock.Controller
	recorder *MockProcessStateMockRecorder
}

// MockProcessStateMockRecorder is the mock recorder for MockProcessState.
type MockProcessStateMockRecorder struct {
	mock *MockProcessState
}

// NewMockProcessState creates a new mock instance.
func NewMockProcessState(ctrl *gomock.Controller) *MockProcessState {
	mock := &MockProcessState{ctrl: ctrl}
	mock.recorder = &MockProcessStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProcessState) EXPECT() *MockProcessStateMockRecorder {
	return m.recorder
}

// ExitCode mocks base method.
func (m *MockProcessState) ExitCode() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExitCode")
	ret0, _ := ret[0].(int)
	return ret0
}

// ExitCode indicates an expected call of ExitCode.
func (mr *MockProcessStateMockRecorder) ExitCode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExitCode", reflect.TypeOf((*MockProcessState)(nil).ExitCode))
}

// Exited mocks base method.
func (m *MockProcessState) Exited() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exited")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Exited indicates an expected call of Exited.
func (mr *MockProcessStateMockRecorder) Exited() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exited", reflect.TypeOf((*MockProcessState)(nil).Exited))
}

// MaxRss mocks base method.
func (m *MockProcessState) MaxRss() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MaxRss")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MaxRss indicates an expected call of MaxRss.
func (mr *MockProcessStateMockRecorder) MaxRss() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MaxRss", reflect.TypeOf((*MockProcessState)(nil).MaxRss))
}

// Pid mocks base method.
func (m *MockProcessState) Pid() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pid")
	ret0, _ := ret[0].(int)
	return ret0
}

// Pid indicates an expected call of Pid.
func (mr *MockProcessStateMockRecorder) Pid() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pid", reflect.TypeOf((*MockProcessState)(nil).Pid))
}

// String mocks base method.
func (m *MockProcessState) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockProcessStateMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockProcessState)(nil).String))
}

// Success mocks base method.
func (m *MockProcessState) Success() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Success")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Success indicates an expected call of Success.
func (mr *MockProcessStateMockRecorder) Success() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Success", reflect.TypeOf((*MockProcessState)(nil).Success))
}

// SysUnix mocks base method.
func (m *MockProcessState) SysUnix() (syscall.WaitStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SysUnix")
	ret0, _ := ret[0].(syscall.WaitStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SysUnix indicates an expected call of SysUnix.
func (mr *MockProcessStateMockRecorder) SysUnix() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SysUnix", reflect.TypeOf((*MockProcessState)(nil).SysUnix))
}

// SysUsageUnit mocks base method.
func (m *MockProcessState) SysUsageUnit() (*syscall.Rusage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SysUsageUnit")
	ret0, _ := ret[0].(*syscall.Rusage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SysUsageUnit indicates an expected call of SysUsageUnit.
func (mr *MockProcessStateMockRecorder) SysUsageUnit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SysUsageUnit", reflect.TypeOf((*MockProcessState)(nil).SysUsageUnit))
}

// SystemTime mocks base method.
func (m *MockProcessState) SystemTime() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SystemTime")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// SystemTime indicates an expected call of SystemTime.
func (mr *MockProcessStateMockRecorder) SystemTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SystemTime", reflect.TypeOf((*MockProcessState)(nil).SystemTime))
}

// UserTime mocks base method.
func (m *MockProcessState) UserTime() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserTime")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// UserTime indicates an expected call of UserTime.
func (mr *MockProcessStateMockRecorder) UserTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserTime", reflect.TypeOf((*MockProcessState)(nil).UserTime))
}
